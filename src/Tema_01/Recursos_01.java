package Tema_01;

import static Principal_Main.Main.*;
import static Tema_01.T_01.*;

/**
 *
 * @author Juan José Estévez González
 */

public class Recursos_01 {
    
    private static String titulo = Principal_Main.Main.asignatura + Principal_Main.Main.tema_01 ;
    
    private static String recurso_01 = """                          
                               
        ************************************************************************************************************************
        """ + titulo + """
        ************************************************************************************************************************
        """ + punto_01 + """
        **********************************************************************************************************************************
                                         PARADIGMAS DE PROGRAMACIÓN.
                                       
            - UN PARADIGMA DE PROGRAMACIÓN DEFINE UN ESTILO DE PROGRAMACIÓN.
              DESCRIBEN LA ESTRUCTURA DEL PROGRAMA QUE VA A DAR SOLUCIÓN A LOS PROBLEMAS COMPUTACIONALES.
                                       
            - EL MODELO IMPERATIVO: JAVA, C, C#, PYTHON, RUBY, ...
                    - ES UN CONJUNTO DE INSTRUCCIONES ORDENADAS DE FORMA SECUENCIAL Y CLARAMENTE DEFINIDAS PARA SU EJECUCIÓN.
                      SE INDICA LA SECUENCIA DE PASOS EXACTA QUE SE HA DE SEGUIR PARA RESOLVER UN PROBLEMA.
                      SE DIVIDE EN:
                                       
                            - PROGRAMACIÓN ESTRUCTURADA:
                                    INCLUYE ESTRUCTURAS DE CONTROL QUE PERMITEN EVALUAR LOS CASOS PARA DECIDIR ENTRE UN 
                                    CAMINO DE INSTRUCCIONES U OTRO.
                                    TAMBIÉN SE INCORPORAN ESTRUCTURAS ITERATIVAS.
                                       
                            - PROGRAMACIÓN PROCEDIMENTAL:
                                    BASADA EN FUNCIONES. SUBDIVIDE EN SUBRUTINAS Y FUNCIONES DE MENOR TAMAÑO QUE SIMPLIFICAN
                                    LA PROGRAMACIÓN, ALIGERANDO SU IMPLEMENTACIÓN Y MANTENIMIENTO.
                                       
                            - PROGRAMACIÓN MODULAR:
                                    PERMITE DESARROLLAR CADA PROGRAMA DE FORMA INDEPENDIENTE AL RESTO DEL CÓDIGO, 
                                    LO QUE AGILIZA LAS TAREAS DE IMPLEMENTACIÓN Y PRUEBA.
                                    EN LA PARTE FINAL DEL PROCESO SE COMBINAN TODOS LOS MÓDULOS, CREANDO EL SOFTARE DEFINITIVO.
                                       
            - EN EL MODELO DECLARATIVO NO SE DESCRIBEN LOS PASOS A SEGUIR, SINO EL PROBLEMA QUE SE PLANTEA.
                    EJEMPLO HTML, CSS, SQL, ...
                                       
        **********************************************************************************************************************************
        *  0. SALIR.
        ************************************************************************************************************************
                               
                               """;
    
    private static String recurso_02 = """                          
                               
        ************************************************************************************************************************
        """ + titulo + """
        ************************************************************************************************************************
        """ + punto_02 + """
        **********************************************************************************************************************************
                                    PROGRAMACIÓN ORIENTADA A OBJETOS, EVENTOS Y COMPONENTES.
                                       
            - MODELO ORIENTADO A OBJETOS:  JAVA, RUBY, VISUAL BASIC, PERL, PHP, PYTHON, ...
                    - SE BASA EN LA CREACIÓN DE ENTIDADES --> OBJETOS.
                      LA INTEGRACIÓN ENTRE OBJETOS PERMITE RESOLVER LOS PROBLEMAS COMPUTACIONALES.
                      LOS OBJETOS TIENEN ASOCIADO:
                            - ATRIBUTOS.
                            - PROPIEDADES.
                            - MÉTODOS.                                       
                                       
            - MODELO BASADO EN EVENTOS:  JAVASCRIPT.
                    - SE BASA EN ACCIONES EXTERNAS.
                                       
            - MODELO BASADO EN COMPONENTES:
                    - SE BASA EN LA REUTILIZACIÓN DE MÓDULOS DE SOFTWARE DESARROLLADOS PREVIAMENTE.                                       

        **********************************************************************************************************************************
        *  0. SALIR.
        ************************************************************************************************************************
                               
                               """;
    
    private static String recurso_03 = """                          
                               
        ************************************************************************************************************************
        """ + titulo + """
        ************************************************************************************************************************
        """ + punto_03 + """
        **********************************************************************************************************************************
                                  HERRAMIENTAS PROPIETARIAS Y LIBREA DE EDICIÓN DE INTERFACES.
                                       
            - LAS HERRAMIENTAS DE DESARROLLO SOFTWARE BASADO EN COMPONENTES VISUALES, UNA VEZ EMPAQUETADAS,
              SE PODRÁN COMPARTIR CON OTROS DESARROLLADORES, SERÁN REUTILIZABLES. 
            - ESTO SUPONE UN MAYOR CICLO DE VIDA SOFTWARE Y REDUCCIÓN DE TIEMPO Y COSTES ASOCIADOS.
                                       
            - PRINCIPALES HERRAMIENTAS:
                                       
                                                 ******************************************************************
                                                 *      LICENCIA            *         LANGUAJES                   *
                ***************************************************************************************************
                *    - VISUAL STUDIO:            *     PROPIETARIA          *      C#, HTML, JAVASCRIPT, XML      *
                *--------------------------------*--------------------------*-------------------------------------*
                *    - COMMUNITY MONO DEVELOP:   *       LIBRE              *      C#, JAVA, .NET, PYTHON         *
                *--------------------------------*--------------------------*-------------------------------------*
                *    - GLADE:                    *       LIBRE              *      C++, C#, JAVA, PYTHON          *
                *--------------------------------*--------------------------*-------------------------------------*
                *    - NETBEANS:                 *       LIBRE              *      JAVA, HTML, PHP, PYTHON        *
                *--------------------------------*--------------------------*-------------------------------------*
                *    - ECLIPSE:                  *       LIBRE              *      JAVA, C++, PHP                 *
                ***************************************************************************************************

        **********************************************************************************************************************************
        *  0. SALIR.
        ************************************************************************************************************************
                               
                               """;
    private static String recurso_04 =  """                          
                               
        ************************************************************************************************************************
        """ + titulo + """
        ************************************************************************************************************************
        """ + punto_04 + """
        **********************************************************************************************************************************
                                  VISUAL STUDIO, MONODEVELOP, GLADE, NETBEANS Y ECLIPSE.
                                        
            - VISUAL STUDIO:
                - USO DE LENGUAJES MULTIPLATAFORMA: C#, F#, RAZOR, HTML5, CSS, JAVASCRIPT, TYPESCRIPT, XAML Y XML.
                - AUTO COMPLETADO DE CÓDIGO Y DETECCIÓN DE PLOBLEMAS EN TIEMPO REAL.
                - PERMITE LA DEPURACIÓN PASO A PASO, PUNTOS DE INTERRUPCIÓN POR PROCEDIMIENTOS Y POR INSTRUCCIONES.
                - PERMITE ADMINISTRAR EL CÓDIGO EN LOS REPOSITORIOS MÁS UTILIZADOS: GIT, GITHUB Y AZURE DEVOPS.
                                        
            - MONODEVELOP:
                - IDE LIBRE Y GRATUITO CON FUNCIÓNES DE EDITOR DE TEXTO, DEPURAR Y GESTIONAR PROYECTOS.
                - PERMITE TRABAJAR CON LOS LENGUAJES MÁS DEMANDADOS: C#, JAVA, .NET Y PYTHON.
                - PERTENECE A UNITY, --> MOTOR DE VIDEOJUEGOS MULTIPLATAFORMA POR EXCELENCIA. PARA WINDOWS, MAC OS X Y LINUX.
                                        
            - GLADE:
                - HERRAMIENTA MUY INTUITIVA, FÁCIL DE APRENDER Y DOMINAR PENSADA PARA GNU/LINUX.
                - PROGRAMA QUE AYUDA A LA CREACIÓN DE INTERFACES GRÁFICAS DE USUARIO.
                - MUY UTILIZADA EN ENTORNOS XML.
                - PERMITE TRABAJAR CON LOS LENGUAJES: C, C++, C#, JAVA, Y PYTHON.
                                        
            - NETBEANS:
                - HERRAMIENTA GRATUITA Y DE CÓDIGO ABIERTO.
                - UNO DE LOS MÁS UTILIZADOS PARA EL DESARROLLO DE INTERFACES A TRAVÉS DEL LENGUAJE JAVA.
                - PERMITE TRABAJAR CON LOS LENGUAJES: JAVA, PHP Y PYTHON.
                - ESTE IDE PERMITE EXTENDER EL ENTORNO MEDIANTES MÓDULOS QUE AGRUPAN CLASES JAVA
                  Y QUE INTERACTUAN CON LAS APIS DE NETBEANS.
                                        
            - ECLIPSE:
                - HERRAMIENTA DE CÓDIGO ABIERTO Y MULTIPLATAFORMA.
                - UNO DE LOS MÁS UTILIZADOS PARA EL DESARROLLO DE INTERFACES A TRAVÉS DEL LENGUAJE JAVA.
                - DISPONE DE LA FUNCIONALIDAD GRAPHICAL LAYOUT (VISTA DE DISEÑO), MUY RÁPIDA E INTUITIVA.
                - DESTACA SU COMPONENTE 'PALETTE' QUE PERMITE: 
                        - CREAR BOTONES, CUADROS DE TEXTO, CUADRÍCULAS, INSERTAR IMÁGENES, ETC...

        **********************************************************************************************************************************
        *  0. SALIR.
        ************************************************************************************************************************
                               
                               """;
    private static String recurso_05 = """                          
                               
        ************************************************************************************************************************
        """ + titulo + """
        ************************************************************************************************************************
        """ + punto_05 + """
        **********************************************************************************************************************************
                                            
                        ***********************************************************************************
                        *  TEMA 01            INSTALACIÓN DE ECLIPSE.                                     *
                        ***********************************************************************************
                        *                                                                                 *
                        *  INSTALAR JAVA Y DESPUÉS JDK.                                                   *
                        *  INSTALAR DESPUÉS ECLIPSE IDE FOR ENTERPRISE JAVA DEVELOPERS.                   *
                        *  IMPORTAR EN LAS LIBRERÍAS  -->       import javax.swing.*;                     *
                        *                                       import java.awt.*;                        *
                        *                                                                                 *
                        *  INSTALACIÓN DE LIBRERÍA Swing:    HELP --> INSTALL NEW SOFTWARE                *
                        *       WORK WITH: --> 2022-09 - https://download.eclipse.org/releases/2022-09/   *
                        *  SELECCIONAMOS TODOS LOS PAQUETES QUE COMIENZAN POR: SWING, SWT Y WINDOWBUILDER *
                        *                                                                                 *
                        * CREACIÓN DE UN JFrame JPanel JDialog:                                           *
                        *    BOTÓN DERECHO SOBRE PROYECTO  --> NEW --> OTHER --> WINDOWBUILDER --> JFRAME *
                        *    BOTÓN DERECHO SOBRE EL JFRAME --> NEW --> OTHER --> WINDOWBUILDER --> JPANEL *
                        *    BOTÓN DERECHO SOBRE EL JFRAME --> NEW --> OTHER --> WINDOWBUILDER --> JDIALG *
                        *                                                                                 *
                        * MOSTRAR VISTA DE DISEÑO:                                                        *
                        *     BOTÓN DERECHO SOBRE EL JFRAME --> OPEN WITH --> WINDOWBUILDEREDITOR         *
                        *     APARECERÁ EL BOTÓN DESIGN                                                   *
                        *                                                                                 *
                        * AÑADIR UNA LIBRERÍA PREVIAMENTE DESCARGADO EL *.jar:                            *
                        *     BOTÓN DERECHO SOBRE PROYECTO --> BUILD PATH --> CONFIGURE BUILD PATH        *
                        *     PULSAR CLASSPATH --> ADD LIBRARY --> SELECCIONARLA --> ADD AND CLOSE        *
                        *                                                                                 *
                        ***********************************************************************************
                                       
        **********************************************************************************************************************************
        *  0. SALIR.
        ************************************************************************************************************************
                               
                               """;
    private static String recurso_06 = """                          
                               
        ************************************************************************************************************************
        """ + titulo + """
        ************************************************************************************************************************
        """ + punto_06 + """
        **********************************************************************************************************************************
                                            LIBRERÍAS. AWT Y SWING.
               
            - LIBRERÍA: 
                    ES UN CONJUNTO DE CLASES CON SUS PROPIOS ATRIBUTOS Y MÉTODOS YA IMPLEMENTADOS.
                    PUEDEN UTILIZARSE PORA CUALQUIER DESARROLLO REUTILIZANDO SU CÓDIGO,
                    LO CUAL REDUCE EL TIEMPO DE PROGRAMACIÓN.
                                       
            - EN EL DESARROLLO DE INTERFACES GRÁFICAS, PARA PODER IMPLEMENTARLAS DEBEMOS USAR LIBRERÍAS COMO -->  AWT Y SWING.
                                       
                                       import javax.swing.*;
                                       import java.awt.*;
                                       
            - AWT: ABSTRACT WINDOW TOOLKIT.
                    ESTA LIBRERÍA PERMITE LA CREACIÓN DE INTERFACES GRÁFICAS A TRAVÉS DE LA IMPORTACIÓN DEL PAQUETE --> java.awt
                    DOS DE SUS FUNCIONALIDADES MÁS IMPORTANTES SON EL USO DE LAS CLASES
                            - 'Component' -> DEFINE LOS CONTROLES PRINCIPALES QUE SE SITÚAN DENTRO DEL ELEMENTO Container. 
                            - 'Container'. -> HACE REFERNCIA A LA PANTALLA EN LA QUE SE MUESTRA LA INTERFAZ DE APLICACIÓN.
                                       
            - SWING:
                    ES UNA EVOLUCIÓN DE AWT, ELIMINANDO ALGUNAS LIMITACIONES.
                    INCORPORA MÚLTIPLES HERRAMIENTAS, MÉTODOS Y COMPONENTES QUE PERMITEN DISEÑAR CUALQUIER INTERFAZ.
                    PERMITE CREAR LA INTERFAZ ARRASTRANDO LOS COMPONENTES Y AL MISMO TIEMPO SE GENERA EL CÓDIGO ASOCIADO.
                    GARANTIZA QUE EL DISEÑO Y COMPORTAMIENTO DE LAS APLICACIONES SERÁ SIEMPRE EL MISMO, INDEPENDIENTEMENTE DEL S.O.
                    PROPORCIONA UNA APARIENCIA QUE PUEDE EMULAR VARIAS PLATAFORMAS Y UTILIZA COMPONENTES VISUALES MÁS AVANZADOS.
                                       
                                                                            *************************
                                                                            *    AWT    *   SWING   *
                                *********************************************************************
                                *    USO COMPONENTES DEL S.O.               *    OK     *           *
                                *-------------------------------------------------------------------*
                                *    DIBUJA SUS PROPIOS COMPONENTES         *           *    OK     *
                                *-------------------------------------------------------------------*
                                *    EL S.O. MANEJA LOS EVENTOS             *    OK     *           *
                                *-------------------------------------------------------------------*
                                *    JAVA MANEJA LOS EVENTOS                *           *    OK     *
                                *-------------------------------------------------------------------*
                                *    LA APARIENCIA CAMBIA CON EL S.O.       *    OK     *           *
                                *-------------------------------------------------------------------*
                                *    MISMA APARIENCIA EN CUALQUIER S.O.     *           *    OK     *
                                *-------------------------------------------------------------------*
                                *    LA APARIENCIA ES ESTÁTICA              *    OK     *           *
                                *-------------------------------------------------------------------*
                                *    SE PUEDEN PERSONALIZAR                 *           *    OK     *
                                *********************************************************************
                                       
        **********************************************************************************************************************************
        *  0. SALIR.
        ************************************************************************************************************************
                               
                               """;
    private static String recurso_07 = """                          
                               
        ************************************************************************************************************************
        """ + titulo + """
        ************************************************************************************************************************
        """ + punto_07 + """
        **********************************************************************************************************************************
                                            PRIMERA CLASE CON JAVA SWING. JFRAME.
                                       
            - IMPORTACIÓN: --> import javax.swing.*;
                                       
            UNA DE LAS CLASES MÁS IMPORTANTES DEL PAQUETE SWING ES:  -->  JFrame
                                 
            JFrame SE ENCARGA DE CREAR LAS VENTANAS SOBRE LAS QUE SE DISEÑAN EL RESTO DE ELEMENTOS.
            EL USO DE JFrame CONLLEVARÁ LA APARICIÓN DE LA VISTA DE DISEÑO:  -->  Desing.
                                       
            DENTRO DE UN JFrame PODREMOS ENCONTRAR MÚLTIPLES JPanel:
                    JFrame  -->  DEFINE UNA VENTANA COMPLETA.            (FOTOGRAMA)
                    JPanel  -->  ES SOLO UN CONTENEDOR DE COMPONENTES.   (PANEL)
               
            -> DESDE File -> NEW -> OTHER -> JFrame (DENTRO DE WINDOWSBUILDER Y SWING DESIGNER) -> NEXT.
                                       
        **********************************************************************************************************************************
        *  0. SALIR.
        ************************************************************************************************************************
                               
                               """;
    private static String recurso_08 = """                          
                               
        ************************************************************************************************************************
        """ + titulo + """
        ************************************************************************************************************************
        """ + punto_08 + """
        **********************************************************************************************************************************
                                     ANÁLISIS DEL ENTORNO DE DISEÑO EN ECLIPSE.
                                       
            - LA VISTA DE DISEÑO:  -->  Desing. -->  PARTE VISUAL.
                NOS PERMITE INSERTAR ELEMENTOS EN LA INTERFAZ GRÁFICA SIN ESCRIBIR CÓDIGO. (SE GENERA AUTOMATICO).
                                       
            - EL CÓDIGO SE CONSULTA DESDE LA PESTAÑA:  --> Source.  --> PARTE DE CÓDIGO.
                SE CARGARÁN LOS MÉTODOS RELATIVOS A CADA UNO DE LOS OBJETOS INSERTADOS Y PODREMOS INCLUIR CÓDIGO PARA
                DEFINIR SU COMPORTAMIENTO.
                                       
            - BARRA DE HERRAMIENTAS:  -->  Toolbar.
                ACCIONES GENERALES DE PROGRAMACIÓN.
                                       
            - VISTA GENERAL:
                VENTANA PRINCIPAL DEL ENTORNO DE DESARROLLO CON WINDOWBUILDER.
                DONDE SE COLOCAN LOS ELEMENTOS DE LA INTERFAZ.
                DONDE SE ENCUENTRAN TODOS LOS COMPONENTES Y CARACTERÍSTICAS DE DISEÑO.
                MUESTRA UNA PREVISUALIZACIÓN DE LA APLICACIÓN QUE SE ESTÁ IMPLEMENTANDO.
                                       
            - PALETTE:
                RECOGE TODOS LOS COMPONENTES, PROPIEDADES Y CONTENEDORES DE UNA INTERFAZ GRÁFICA.
                        - containers  -> DEFINEN EL TIPO DE CONTENEDOR DE LOS COMPONENTES.
                        - layouts     -> DETERMINAN LA DISTRIBUCIÓN DE LOS COMPONENTES.
                        - components  -> SON ELEMENTOS QUE PERMITEN AL USUARIO INTERACTUAR CON LA APLICACIÓN.
                                         LOS USAREMOS EN EL INTERFAZ -> ETIQUETAS, CAMPOS DE TEXTOS, BOTONES, ETC...
                                         CADA components TENDRÁ UNA CLASE JAVA CON SUS ATRIBUTOS Y MÉTODOS.
                                         PARA USAR UN components HAY QUE CREAR UNA INSTANCIA DEL OBJETO.
                                         PARA INSERTARLO VASTA CON ARRASTRARLO A LA ZONA DEL CONTENEDOR DONDE SE VA A UBICAR.
                                       
            - STRUCTURE:
                SE COMPONE DE DOS PARTES:
                                       
                        - COMPONENTS: 
                                MUESTRA UN RESUMEN DE TODOS LOS COMPONENTES QUE SE HAN COLOCADO EN NUESTRA INTERFAZ.
                                APARECEN LOS NOMBRES DE LAS INSTANCIAS DE LOS OBJETOS CREADOS.
                                APARECEN LOS TEXTOS QUE SE MUESTRA AL USUARIO ENTRE COMILLAS.
                                       
                        - PROPIERTIES:
                                APARECEN LAS PROPIEDADES DE CADA COMPONENTE.
                                SERÁN MODIFICABLES A TRAVÉS DE LA VENTANA QUE APARECE.
                                ALGUNAS DE ELLAS SON:
                                    - VARIABLE  -> NOMBRES DE LAS INSTANCIAS.
                                    - BACKGROUND  -> COLOR DE FONDO.
                                    - FONT  -> TIPO DE LETRA.
                                       
        **********************************************************************************************************************************
        *  0. SALIR.
        ************************************************************************************************************************
                               
                               """;    
    
    public static void recurso(String opcion) {
        
        String menu="";
        do {
            switch (opcion) {                
                case "1" -> System.out.println(recurso_01);
                case "2" -> System.out.println(recurso_02);
                case "3" -> System.out.println(recurso_03);
                case "4" -> System.out.println(recurso_04);
                case "5" -> System.out.println(recurso_05);                
                case "6" -> System.out.println(recurso_06);
                case "7" -> System.out.println(recurso_07);
                case "8" -> System.out.println(recurso_08);
                case "9" -> {
                    System.out.println(recurso_01);
                    continuar();
                    System.out.println(recurso_02);
                    continuar();
                    System.out.println(recurso_03);
                    continuar();
                    System.out.println(recurso_04);
                    continuar();
                    System.out.println(recurso_05);
                    continuar();
                    System.out.println(recurso_06);
                    continuar();
                    System.out.println(recurso_07);
                    continuar();
                    System.out.println(recurso_08);
                }
            }
            try {                
                menu = miTryRecursos();                
                switch (menu) {                   
                    case "0" -> {}
                    default -> {
                            miDefault();
                            }
                }
            }  catch (Exception e) {
                miError(e);
            }
        } while (!"0".equals(menu));   
    }
}